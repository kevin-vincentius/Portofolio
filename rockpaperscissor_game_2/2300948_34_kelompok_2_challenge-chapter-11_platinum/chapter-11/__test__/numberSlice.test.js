// Import the Redux store and actions
import { configureStore } from "@reduxjs/toolkit";
import numberReducer, { generateNumber } from "../src/redux/numberSlice";

describe("Redux Number Slice Tests", () => {
  let store;

  beforeEach(() => {
    // Create a store with the numberSlice reducer using configureStore
    store = configureStore({
      reducer: {
        number: numberReducer,
      },
    });
  });
  // Positive Test 1:
  it("should have an initial autoGeneratedNumber of 0", () => {
    expect(store.getState().number.autoGeneratedNumber).toBe(0);
  });
  // Positive Test 2:
  it("generateNumber action should update autoGeneratedNumber", () => {
    store.dispatch(generateNumber());

    const autoGeneratedNumber = store.getState().number.autoGeneratedNumber;
    expect(autoGeneratedNumber).toBeGreaterThanOrEqual(0);
    expect(autoGeneratedNumber).toBeLessThan(1000);
  });
  // Negative Test 1:
  it("generateNumber action should return a new state object", () => {
    const initialState = store.getState();

    const newState = store.dispatch(generateNumber());

    expect(newState).not.toBe(initialState);
  });
  // Negative Test 2:
  it("should not allow generating a number greater than 999", () => {
    for (let i = 0; i < 1000; i++) {
      store.dispatch(generateNumber());
      const autoGeneratedNumber = store.getState().number.autoGeneratedNumber;
      expect(autoGeneratedNumber).toBeGreaterThanOrEqual(0);
      expect(autoGeneratedNumber).toBeLessThan(1000);
    }
  });
  // Negative Test 3:
  it("should not allow setting autoGeneratedNumber directly to a negative number", () => {
    // Attempt to set autoGeneratedNumber directly to a negative number
    store.dispatch(generateNumber(-42));
    expect(store.getState().number.autoGeneratedNumber).not.toBe(-42);
  });
});
